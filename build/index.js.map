{"version":3,"file":"index.js","mappings":"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","sources":["webpack://andika/./src/components/blockcontrols.js","webpack://andika/./src/components/blockhandler.js","webpack://andika/./src/components/inspectorcontrols.js","webpack://andika/./src/edit.js","webpack://andika/./src/save.js","webpack://andika/./src/utils/andika-ai.js","webpack://andika/./src/editor.scss","webpack://andika/external window [\"wp\",\"blockEditor\"]","webpack://andika/external window [\"wp\",\"blocks\"]","webpack://andika/external window [\"wp\",\"components\"]","webpack://andika/external window [\"wp\",\"compose\"]","webpack://andika/external window [\"wp\",\"data\"]","webpack://andika/external window [\"wp\",\"element\"]","webpack://andika/external window [\"wp\",\"i18n\"]","webpack://andika/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://andika/webpack/bootstrap","webpack://andika/webpack/runtime/compat get default export","webpack://andika/webpack/runtime/define property getters","webpack://andika/webpack/runtime/hasOwnProperty shorthand","webpack://andika/webpack/runtime/make namespace object","webpack://andika/./src/index.js"],"sourcesContent":["import { AlignmentToolbar, BlockControls } from '@wordpress/block-editor';\r\nimport { ToolbarGroup, ToolbarButton, Spinner } from '@wordpress/components';\r\nimport { __ } from '@wordpress/i18n';\r\n\r\nfunction AndikaBlockControls( props ) {\r\n    const {\r\n        attributes,\r\n        setAttributes,\r\n        isLoading,\r\n        onGenerateClick,\r\n    } = props;\r\n\r\n    return (\r\n        <BlockControls>\r\n            <ToolbarGroup>\r\n                <AlignmentToolbar\r\n                    value={attributes.alignment}\r\n                    onChange={(alignment) => setAttributes({ alignment })}\r\n                />\r\n                <ToolbarButton\r\n                    icon={isLoading ? <Spinner /> : 'lightbulb'}\r\n                    label={__('Generate Text', 'andika')}\r\n                    onClick={onGenerateClick}\r\n                    disabled={isLoading}\r\n                />\r\n            </ToolbarGroup>\r\n        \r\n        </BlockControls>\r\n    );\r\n};\r\n\r\nexport default AndikaBlockControls;\r\n","import { useDispatch, useSelect } from '@wordpress/data';\r\nimport { store as blockEditorStore } from '@wordpress/block-editor';\r\nimport { createBlock } from '@wordpress/blocks';\r\n\r\nexport const AndikaBlockHandler = () => {\r\n  const { removeBlock, replaceBlocks } = useDispatch(blockEditorStore);\r\n\r\n  const { getBlockAttributes, getPreviousBlockClientId, getNextBlockClientId, getBlockName } = useSelect((select) =>\r\n    select(blockEditorStore)\r\n  );\r\n\r\n  const onSplit = (attributes, clientId) => (value, isOriginal) => {\r\n    let block;\r\n\r\n    if (isOriginal || value) {\r\n      block = createBlock('andika-block/andika', {\r\n        ...attributes,\r\n        content: value,\r\n      });\r\n    } else {\r\n      block = createBlock('core/paragraph');\r\n    }\r\n\r\n    if (isOriginal) {\r\n      block.clientId = clientId;\r\n    }\r\n\r\n    return block;\r\n  };\r\n\r\n  const onMerge = (forward, clientId) => {\r\n    // Get the previous and next blocks based on the direction\r\n    const previousBlock = getPreviousBlockClientId(clientId);\r\n    const nextBlock = getNextBlockClientId(clientId);\r\n    const destinationBlock = forward ? nextBlock : previousBlock;\r\n\r\n    if (destinationBlock && getBlockName(destinationBlock) === 'andika-block/andika') {\r\n      const currentContent = getBlockAttributes(clientId).content;\r\n      const destinationContent = getBlockAttributes(destinationBlock).content;\r\n\r\n      // Concatenate the contents based on the direction\r\n      const updatedContent = forward\r\n        ? currentContent + destinationContent\r\n        : destinationContent + currentContent;\r\n\r\n      // Replace the destination block with a new block with the updated content\r\n      replaceBlocks(\r\n        destinationBlock,\r\n        createBlock('andika-block/andika', {\r\n          content: updatedContent,\r\n        })\r\n      );\r\n\r\n      // Remove the current block\r\n      removeBlock(clientId);\r\n    }\r\n  };\r\n\r\n  return { onSplit, onMerge };\r\n};\r\nexport default AndikaBlockHandler;","import { __ } from '@wordpress/i18n';\r\nimport {\r\n    InspectorControls,\r\n    PanelColorSettings,\r\n    FontSizePicker,\r\n} from '@wordpress/block-editor';\r\nimport { PanelBody, RangeControl } from '@wordpress/components';\r\n\r\nconst AndikaInspectorControls = ({\r\n    attributes,\r\n    setAttributes,\r\n}) => {\r\n    const { lineHeight } = attributes;\r\n\r\n    const onChangeLineHeight = (value) => {\r\n        setAttributes({ lineHeight: value });\r\n    };\r\n\r\n    return (\r\n        <InspectorControls>\r\n            <PanelBody title={__('Typography', 'andika')}>\r\n                <FontSizePicker\r\n                    value={attributes.fontSize}\r\n                    onChange={(value) => setAttributes({ fontSize: value })}\r\n                />\r\n                <RangeControl\r\n                    label={__('Line height', 'andika')}\r\n                    value={lineHeight}\r\n                    onChange={onChangeLineHeight}\r\n                    min={1}\r\n                    max={3}\r\n                    step={0.1}\r\n                />\r\n            </PanelBody>\r\n            <PanelColorSettings\r\n                title={__('Color settings', 'andika')}\r\n                initialOpen={false}\r\n                colorSettings={[\r\n                    {\r\n                        value: attributes.textColor,\r\n                        onChange: (value) => setAttributes({ textColor: value }),\r\n                        label: __('Text color', 'andika'),\r\n                    },\r\n                    {\r\n                        value: attributes.backgroundColor,\r\n                        onChange: (value) => setAttributes({ backgroundColor: value }),\r\n                        label: __('Background color', 'andika'),\r\n                    }\r\n                ]}\r\n            />\r\n\r\n        </InspectorControls>\r\n    );\r\n};\r\n\r\nexport default AndikaInspectorControls;","import { __ } from '@wordpress/i18n';\nimport { RichText, useBlockProps } from '@wordpress/block-editor';\nimport { Fragment, useState, useCallback } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\n\nimport { generateText } from './utils/andika-ai';\n\nimport AndikaBlockControls from './components/blockcontrols';\nimport AndikaInspectorControls from './components/inspectorcontrols';\nimport AndikaBlockHandler from './components/blockhandler';\n\nexport default function Edit({ attributes, setAttributes, isSelected, clientId }) {\n    const [content, setContent] = useState(attributes.content || '');    \n    const [isLoading, setIsLoading] = useState(false);\n\n    // Get the post title and previous block content\n    const postTitle = useSelect((select) =>\n        select('core/editor').getEditedPostAttribute('title')\n    );\n\n    const previousBlocks = useSelect((select) =>\n        select(blockEditorStore).getBlocks()\n    );\n\n    const previousContent = previousBlocks\n        .slice(0, -1)\n        .map((block) => block.attributes.content)\n        .join('\\n');\n        \n    const onGenerateClick = useCallback(async () => {\n        setIsLoading(true);\n        \n        const prompt = `Title: ${postTitle}\\n\\n${previousContent}\\n\\n${content}`;\n        \n        try {\n            const newText = await generateText(\n                prompt,\n                andika['stream'],\n                (partialText) => {\n                    setContent((prevContent) => prevContent + partialText);\n                }\n            );\n            setAttributes({ content: newText });\n        } catch (error) {\n            console.error(error);\n        }\n        \n        setIsLoading(false);\n\n    }, [postTitle, previousContent, content]);\n\n    const blockProps = useBlockProps();\n\n    const { onSplit, onMerge } = AndikaBlockHandler();\n\n    return (\n        <Fragment>\n            <AndikaBlockControls\n                attributes={attributes}\n                setAttributes={setAttributes}\n                isLoading={isLoading}\n                onGenerateClick={onGenerateClick}\n            />\n            <AndikaInspectorControls\n                attributes={attributes}\n                setAttributes={setAttributes}\n            />\n            <RichText\n                { ...blockProps }\n                tagName=\"p\"\n                value={content}\n                onChange={(newContent) => {\n                    setAttributes({ content: newContent });\n                    setContent(newContent);\n                }}\n                className=\"andika-placeholder\"\n                placeholder={__(\n                    'Start typing and click the lightbulb icon to generate text...',\n                    'andika',\n                )}\n                isSelected={isSelected}\n                style={{\n                    textAlign: attributes.alignment,\n                    fontSize: attributes.fontSize,\n                    color: attributes.textColor,\n                    backgroundColor: attributes.backgroundColor,\n                }}\n                onSplit={( value, isOriginal ) => {\n                    const block = onSplit(attributes, clientId)(value, isOriginal);\n                    if (isOriginal) {\n                        setContent(value);\n                        setAttributes({ content: value });\n                    } else {\n                        insertBlock(block, clientId);\n                    }\n                }}\n                onMerge={(forward) => onMerge(forward, clientId)}\n            />\n        </Fragment>\n    );\n}","import { RichText } from '@wordpress/block-editor';\n\nexport default function save({ attributes }) {\n    const { content, alignment, backgroundColor, textColor, fontSize, lineHeight } = attributes;\n\n    const fontSizeInRem = fontSize ? fontSize / 16 + 'rem' : undefined;\n\n    return (\n        <RichText.Content\n            tagName=\"p\"\n            value={content}\n            style={{\n                textAlign: alignment,\n                fontSize: fontSizeInRem,\n                color: textColor,\n                backgroundColor: backgroundColor,\n                lineHeight: lineHeight ? lineHeight : undefined,\n            }}\n        />\n    );\n}\n","export async function generateText(prompt, stream = true, onProgress = null) {\r\n    try {\r\n        const response = await fetch(andika.api_url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-WP-Nonce': andika.api_nonce,\r\n            },\r\n            body: JSON.stringify({ prompt, stream: !!stream }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(__('Error generating text. Please check your API key and settings.', 'andika'));\r\n        }\r\n\r\n        if (stream) {\r\n            const reader = response.body.getReader();\r\n            let result = '';\r\n\r\n            while (true) {\r\n                const { done, value } = await reader.read();\r\n                if (done) {\r\n                    break;\r\n                }\r\n                const partialJson = new TextDecoder('utf-8').decode(value);\r\n                const partialResult = JSON.parse(partialJson);\r\n                const newText = partialResult.generated_text;\r\n                result += newText;\r\n\r\n                if (onProgress) {\r\n                    onProgress(newText);\r\n                }\r\n            }\r\n\r\n            return result;\r\n        } else {\r\n            const jsonResponse = await response.json();\r\n            return jsonResponse.generated_text;\r\n        }\r\n    } catch (error) {\r\n        throw new Error(__('Error generating text. Please check your API key and settings.', 'andika'));\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport {};","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"compose\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\nimport { withColors, withFontSizes } from '@wordpress/block-editor';\nimport { compose } from '@wordpress/compose';\nimport './editor.scss';\n\nimport Edit from './edit';\nimport Save from './save';\nimport metadata from './block.json';\n\nregisterBlockType(metadata.name, {\n\ttitle: __(metadata.title),\n\ticon: metadata.icon,\n\tcategory: metadata.category,\n\tdescription: __(metadata.description),\n\tsupports: {\n\t\thtml: false,\n\t},\n\tattributes: metadata.attributes,\n\tedit: compose(\n\t\twithColors('backgroundColor', { textColor: 'color' }),\n\t\twithFontSizes('fontSize'),\n\t)((props) => <Edit {...props} apiSettings={window.andikaApiSettings} />),\n\tsave: Save,\n});\n"],"names":["AlignmentToolbar","BlockControls","ToolbarGroup","ToolbarButton","Spinner","__","AndikaBlockControls","props","attributes","setAttributes","isLoading","onGenerateClick","createElement","value","alignment","onChange","icon","label","onClick","disabled","useDispatch","useSelect","store","blockEditorStore","createBlock","AndikaBlockHandler","removeBlock","replaceBlocks","getBlockAttributes","getPreviousBlockClientId","getNextBlockClientId","getBlockName","select","onSplit","clientId","isOriginal","block","content","onMerge","forward","previousBlock","nextBlock","destinationBlock","currentContent","destinationContent","updatedContent","InspectorControls","PanelColorSettings","FontSizePicker","PanelBody","RangeControl","AndikaInspectorControls","_ref","lineHeight","onChangeLineHeight","title","fontSize","min","max","step","initialOpen","colorSettings","textColor","backgroundColor","RichText","useBlockProps","Fragment","useState","useCallback","generateText","Edit","isSelected","setContent","setIsLoading","postTitle","getEditedPostAttribute","previousBlocks","getBlocks","previousContent","slice","map","join","prompt","newText","andika","partialText","prevContent","error","console","blockProps","_extends","tagName","newContent","className","placeholder","style","textAlign","color","insertBlock","save","fontSizeInRem","undefined","Content","stream","arguments","length","onProgress","response","fetch","api_url","method","headers","api_nonce","body","JSON","stringify","ok","Error","reader","getReader","result","done","read","partialJson","TextDecoder","decode","partialResult","parse","generated_text","jsonResponse","json","registerBlockType","withColors","withFontSizes","compose","Save","metadata","name","category","description","supports","html","edit","apiSettings","window","andikaApiSettings"],"sourceRoot":""}