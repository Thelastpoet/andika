{"version":3,"file":"index.js","mappings":"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","sources":["webpack://andika/./src/components/blockcontrols.js","webpack://andika/./src/components/blockhandler.js","webpack://andika/./src/components/inspectorcontrols.js","webpack://andika/./src/edit.js","webpack://andika/./src/save.js","webpack://andika/./src/utils/andika-ai.js","webpack://andika/./src/editor.scss","webpack://andika/external window [\"wp\",\"blockEditor\"]","webpack://andika/external window [\"wp\",\"blocks\"]","webpack://andika/external window [\"wp\",\"components\"]","webpack://andika/external window [\"wp\",\"data\"]","webpack://andika/external window [\"wp\",\"element\"]","webpack://andika/external window [\"wp\",\"i18n\"]","webpack://andika/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://andika/webpack/bootstrap","webpack://andika/webpack/runtime/compat get default export","webpack://andika/webpack/runtime/define property getters","webpack://andika/webpack/runtime/hasOwnProperty shorthand","webpack://andika/webpack/runtime/make namespace object","webpack://andika/./src/index.js"],"sourcesContent":["import { AlignmentToolbar, BlockControls } from '@wordpress/block-editor';\r\nimport { ToolbarGroup, ToolbarButton, Spinner } from '@wordpress/components';\r\nimport { __ } from '@wordpress/i18n';\r\n\r\nfunction AndikaBlockControls( props ) {\r\n    const {\r\n        attributes,\r\n        setAttributes,\r\n        isLoading,\r\n        onGenerateClick,\r\n    } = props;\r\n\r\n    return (\r\n        <BlockControls>\r\n            <ToolbarGroup>\r\n                <AlignmentToolbar\r\n                    value={attributes.alignment}\r\n                    onChange={(alignment) => setAttributes({ alignment })}\r\n                />\r\n                <ToolbarButton\r\n                    icon={isLoading ? <Spinner /> : 'lightbulb'}\r\n                    label={__('Generate Text', 'andika')}\r\n                    onClick={onGenerateClick}\r\n                    disabled={isLoading}\r\n                />\r\n            </ToolbarGroup>\r\n        \r\n        </BlockControls>\r\n    );\r\n};\r\n\r\nexport default AndikaBlockControls;\r\n","import { createBlock } from '@wordpress/blocks';\r\nimport { useDispatch, useSelect } from '@wordpress/data';\r\nimport { store as blockEditorStore } from '@wordpress/block-editor';\r\n\r\nexport const AndikaBlockHandler = (attributes, content, setAttributes, setContent) => {\r\n  const { replaceBlocks, removeBlock } = useDispatch(blockEditorStore);\r\n  const {\r\n    getBlock,   \r\n    getBlockOrder,\r\n    getBlockIndex,\r\n  } = useSelect((select) => select(blockEditorStore), []);\r\n \r\n  const onSplit = (value, isOriginal) => {\r\n    if (isOriginal) {\r\n      const updatedContent = content.slice(0, content.indexOf(value));\r\n      setAttributes({ content: updatedContent });\r\n      setContent(updatedContent);\r\n    }\r\n\r\n    const newAttributes = {\r\n      ...attributes,\r\n      content: value,\r\n    };\r\n\r\n    const block = createBlock(\"andika-block/andika\", newAttributes);\r\n    return block;\r\n  };\r\n\r\n  const onReplace = (blocks, clientId) => {\r\n    replaceBlocks(clientId, blocks.map((block, index) =>\r\n      (index === 0 && block.name === name)\r\n        ? {\r\n            ...block,\r\n            ...attributes,\r\n            ...block.attributes,\r\n          }\r\n        : block\r\n    ));\r\n  };\r\n\r\n  const onMerge = (clientId) => {\r\n    const blockIndex = getBlockIndex(clientId);\r\n    const blockOrder = getBlockOrder();\r\n  \r\n    // Merge with the previous block\r\n    const prevBlockIndex = blockIndex - 1;\r\n    const prevBlockClientId = blockOrder[prevBlockIndex];\r\n  \r\n    if (prevBlockClientId) {\r\n      const prevBlock = getBlock(prevBlockClientId);\r\n  \r\n      if (prevBlock.name === \"andika-block/andika\") {\r\n        const mergedContent = prevBlock.attributes.content + content;\r\n  \r\n        setAttributes({ content: mergedContent });\r\n        setContent(mergedContent);\r\n  \r\n        removeBlock(prevBlockClientId);\r\n        return;\r\n      }\r\n    }\r\n  \r\n    // Merge with the next block\r\n    const nextBlockIndex = blockIndex + 1;\r\n    const nextBlockClientId = blockOrder[nextBlockIndex];\r\n  \r\n    if (nextBlockClientId) {\r\n      const nextBlock = getBlock(nextBlockClientId);\r\n  \r\n      if (nextBlock.name === \"andika-block/andika\") {\r\n        const mergedContent = content + nextBlock.attributes.content;\r\n  \r\n        setAttributes({ content: mergedContent });\r\n        setContent(mergedContent);\r\n  \r\n        removeBlock(nextBlockClientId);\r\n      }\r\n    }\r\n  };  \r\n \r\n  return { onSplit, onReplace, onMerge };\r\n};\r\nexport default AndikaBlockHandler;","import { __ } from '@wordpress/i18n';\r\nimport {\r\n    InspectorControls,\r\n    PanelColorSettings,\r\n    FontSizePicker,\r\n} from '@wordpress/block-editor';\r\nimport { PanelBody, RangeControl } from '@wordpress/components';\r\n\r\nconst AndikaInspectorControls = ({\r\n    attributes,\r\n    setAttributes,\r\n}) => {\r\n    const { lineHeight } = attributes;\r\n\r\n    const onChangeLineHeight = (value) => {\r\n        setAttributes({ lineHeight: value });\r\n    };\r\n\r\n    return (\r\n        <InspectorControls group=\"typography\">\r\n            <PanelBody title={__('Typography', 'andika')}>\r\n                <FontSizePicker\r\n                    value={attributes.fontSize}\r\n                    onChange={(value) => setAttributes({ fontSize: value })}\r\n                />\r\n                <RangeControl\r\n                    label={__('Line height', 'andika')}\r\n                    value={lineHeight}\r\n                    onChange={onChangeLineHeight}\r\n                    min={1}\r\n                    max={3}\r\n                    step={0.1}\r\n                />\r\n            </PanelBody>\r\n            <PanelColorSettings\r\n                title={__('Color settings', 'andika')}\r\n                initialOpen={false}\r\n                colorSettings={[\r\n                    {\r\n                        value: attributes.textColor,\r\n                        onChange: (value) => setAttributes({ textColor: value }),\r\n                        label: __('Text color', 'andika'),\r\n                    },\r\n                    {\r\n                        value: attributes.backgroundColor,\r\n                        onChange: (value) => setAttributes({ backgroundColor: value }),\r\n                        label: __('Background color', 'andika'),\r\n                    }\r\n                ]}\r\n            />\r\n\r\n        </InspectorControls>\r\n    );\r\n};\r\n\r\nexport default AndikaInspectorControls;","import { __ } from '@wordpress/i18n';\nimport { useSelect } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { Fragment, useState, useCallback } from '@wordpress/element';\nimport { RichText, useBlockProps } from '@wordpress/block-editor';\n\nimport { generateText } from './utils/andika-ai';\n\nimport AndikaBlockHandler from './components/blockhandler';\nimport AndikaBlockControls from './components/blockcontrols';\nimport AndikaInspectorControls from './components/inspectorcontrols';\n\nexport default function Edit({ attributes, setAttributes, isSelected, clientId }) {\n    const [content, setContent] = useState(attributes.content || '');    \n    const [isLoading, setIsLoading] = useState(false);\n\n    // Get the post title and previous block content\n    const postTitle = useSelect((select) =>\n        select('core/editor').getEditedPostAttribute('title')\n    );\n\n    const previousBlocks = useSelect((select) =>\n        select(blockEditorStore).getBlocks()\n    );\n\n    const previousContent = previousBlocks\n        .slice(0, -1)\n        .map((block) => block.attributes.content)\n        .join('\\n');\n        \n        const onGenerateClick = useCallback(async () => {\n            setIsLoading(true);\n            \n            const prompt = `Title: ${postTitle}\\n\\n${previousContent}\\n\\n${content}`;\n            \n            try {\n                const newText = await generateText(prompt);\n                setContent((prevContent) => prevContent + newText);\n                setAttributes({ content: content + newText }); // Update the content attribute with the new generated text\n            } catch (error) {\n                console.error(error);\n            }\n            \n            setIsLoading(false);\n        \n        }, [postTitle, previousContent, content]);        \n\n    const blockProps = useBlockProps();\n\n    const { onSplit, onMerge, onReplace } = AndikaBlockHandler(attributes, content, setAttributes, setContent);\n    \n    return (\n        <Fragment>\n            <AndikaBlockControls\n                attributes={attributes}\n                setAttributes={setAttributes}\n                isLoading={isLoading}\n                onGenerateClick={onGenerateClick}\n            />\n            <AndikaInspectorControls\n                attributes={attributes}\n                setAttributes={setAttributes}\n            />\n            <RichText\n                identifier='content'\n                { ...blockProps }\n                tagName=\"p\"\n                value={content}\n                onChange={(newContent) => {\n                    setAttributes({ content: newContent });\n                    setContent(newContent);\n                }}\n                className=\"andika-placeholder\"\n                \n                placeholder={__(\n                    'Start typing and click the lightbulb icon to generate text...',\n                    'andika',\n                )}\n                isSelected={isSelected}\n                style={{\n                    textAlign: attributes.alignment,\n                    fontSize: attributes.fontSize,\n                    color: attributes.textColor,\n                    backgroundColor: attributes.backgroundColor,\n                }}\n                onSplit={onSplit}                 \n                onReplace={(blocks) => onReplace(blocks, clientId)}           \n                onRemove={ () => onReplace( []) }                \n                onMerge={() => onMerge(clientId)}\n            />\n        </Fragment>\n    );\n}","import { RichText } from '@wordpress/block-editor';\n\nexport default function Save({ attributes }) {\n    return (\n        <RichText.Content\n            tagName=\"p\"\n            value={attributes.content}\n            style={{\n                textAlign: attributes.alignment,\n                fontSize: attributes.fontSize,\n                color: attributes.textColor,\n                backgroundColor: attributes.backgroundColor,\n            }}\n        />\n    );\n}\n","import { __ } from '@wordpress/i18n';\r\n\r\nexport async function generateText(prompt) {\r\n    const apiUrl = `${andika.rest_url}andika/v1/andika-ai`;\r\n\r\n    try {\r\n        const response = await fetch(apiUrl, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-WP-Nonce': andika.api_nonce,\r\n            },\r\n            body: JSON.stringify({ prompt }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(__('Error generating text. Please check your API key and settings.', 'andika'));\r\n        }\r\n\r\n        if (response.ok) {\r\n            const jsonResponse = await response.json();\r\n            return jsonResponse.generated_text || '';\r\n        }\r\n        \r\n    } catch (error) {\r\n        throw new Error(__('Error generating text. Please check your API key and settings.', 'andika'));\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport {};","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\nimport './editor.scss';\n\nimport Edit from './edit';\nimport Save from './save';\nimport metadata from './block.json';\n\nregisterBlockType(metadata.name, {\n\ttitle: __(metadata.title),\n\ticon: metadata.icon,\n\tcategory: metadata.category,\n\tdescription: __(metadata.description),\n\tsupports: {\n\t\thtml: false,\n\t},\n\tattributes: metadata.attributes,\n\tedit: Edit,\n\tsave: Save,\n});\n"],"names":["AlignmentToolbar","BlockControls","ToolbarGroup","ToolbarButton","Spinner","__","AndikaBlockControls","props","attributes","setAttributes","isLoading","onGenerateClick","createElement","value","alignment","onChange","icon","label","onClick","disabled","createBlock","useDispatch","useSelect","store","blockEditorStore","AndikaBlockHandler","content","setContent","replaceBlocks","removeBlock","getBlock","getBlockOrder","getBlockIndex","select","onSplit","isOriginal","updatedContent","slice","indexOf","newAttributes","block","onReplace","blocks","clientId","map","index","name","onMerge","blockIndex","blockOrder","prevBlockIndex","prevBlockClientId","prevBlock","mergedContent","nextBlockIndex","nextBlockClientId","nextBlock","InspectorControls","PanelColorSettings","FontSizePicker","PanelBody","RangeControl","AndikaInspectorControls","_ref","lineHeight","onChangeLineHeight","group","title","fontSize","min","max","step","initialOpen","colorSettings","textColor","backgroundColor","Fragment","useState","useCallback","RichText","useBlockProps","generateText","Edit","isSelected","setIsLoading","postTitle","getEditedPostAttribute","previousBlocks","getBlocks","previousContent","join","prompt","newText","prevContent","error","console","blockProps","_extends","identifier","tagName","newContent","className","placeholder","style","textAlign","color","onRemove","Save","Content","apiUrl","andika","rest_url","response","fetch","method","headers","api_nonce","body","JSON","stringify","ok","Error","jsonResponse","json","generated_text","registerBlockType","metadata","category","description","supports","html","edit","save"],"sourceRoot":""}