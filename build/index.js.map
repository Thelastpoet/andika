{"version":3,"file":"index.js","mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,kCAAkC;AAC3E;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwB;AACxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzHA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,IAAI,kBAAkB,IAAI,MAAM;AAC1E;AACA;AACA,aAAa;AACb,YAAY;AACZ,YAAY;AACZ,cAAc;AACd,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,SAAS,kBAAkB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO;AAChB;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kPAAkP,cAAc;AAChQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8QAA8Q,iBAAiB;AAC/R;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,IAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,IAAI,IAAI,eAAe,SAAS,KAAK;AACnE;AACA;AACA;AACA,wCAAwC,IAAI,EAAE,KAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,IAAI,yBAAyB,aAAa,IAAI;AAC/F,yCAAyC,IAAI,yBAAyB,SAAS,GAAG,SAAS,GAAG,WAAW,GAAG;AAC5G,kDAAkD,IAAI,yBAAyB;AAC/E,mDAAmD,IAAI,yBAAyB;AAChF;AACA;AACA;AACA;AACA,8CAA8C,IAAI,MAAM,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB;AACrB,WAAW;AACX;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,sBAAsB,gBAAgB;AACtwCAAwaAAa,EAAE;AACf,cAAc,IAAI,GAAG,GAAG,sBAAsB,GAAG,6CAA6C,IAAI;AAClG,UAAU,IAAI,aAAa,GAAG,aAAa,GAAG,cAAc,GAAG;AAC/D,eAAe,IAAI,GAAG,IAAI;AAC1B,mBAAmB,IAAI;AACvB,aAAa,IAAI;AACjB,YAAY,IAAI;AAChB,WAAW,IAAI;AACf;AACA,oDAAoD,IAAI;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,IAAI;AAChC;AACA,kGAAkG,GAAG,SAAS,GAAG,WAAW,GAAG;AAC/H;AACA;AACA;AACA;AACA,uFAAuF,IAAI,EAAE,KAAK,2EAA2E,IAAI,yBAAyB,IAAI,KAAK,GAAG,kBAAkB,GAAG,iCAAiC,IAAI;AAChR;AACA,iBAAiB;AACjB;AACA;AACA,kCAAkC,IAAI;AACtC;AACA;AACA,sFAAsF,IAAI,EAAE,KAAK,4BAA4B,IAAI,uBAAuB,EAAE,8BAA8B,IAAI,KAAK,GAAG,kBAAkB,GAAG,iCAAiC,IAAI;AAC9P,2FAA2F,IAAI,EAAE,KAAK,uFAAuF,IAAI,yBAAyB,IAAI,KAAK,GAAG,kBAAkB,GAAG,iCAAiC,IAAI;AAChS;AACA;AACA;AACA,iEAAiE,GAAG,4DAA4D,GAAG;AACnI;AACA;AACA,gBAAgB,IAAI;AACpB;AACA;AACA,uBAAuB,IAAI;AAC3B,2FAA2F,KAAK,sEAAsE,IAAI;AAC1K;AACA;AACA,kCAAkC,eAAe,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,WAAW,GAAG;AACd;AACA,2BAA2B,GAAG,8CAA8C,GAAG;AAC/E;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,KAAK;AAC9C,2CAA2C,EAAE,kCAAkC,KAAK,6CAA6C,KAAK;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sCAAsC,UAAU;AAC1E;AACA,+BAA+B,GAAG,iCAAiC,GAAG,6EAA6E,GAAG,+BAA+B,GAAG,gCAAgC,GAAG;AAC3N;AACA;AACA;AACA;AACA,gCAAgC,GAAG;AACnC,sDAAsD,GAAG,iBAAiB,IAAI;AAC9E;;AAEA;AACA;AACA,0FAA0F,uEAAuE,+DAA+D,EAAE;AAClO;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO,MAAM,GAAG,IAAI,KAAK,KAAK,MAAM;AACtD;AACA;AACA,gBAAgB,MAAM,GAAG,KAAK,KAAK,MAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,KAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B;AACA;AACA;AACA;AACA,EAAE,QAAQ;AACV;AACA;AACA;AACA;AACA,kCAAkC,MAAM,SAAS,YAAY,UAAU,KAAK;AAC5E,gCAAgC,KAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA,kBAAkB,KAAK;AACvB;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA,mBAAmB,KAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,KAAK,SAAS,KAAK;AAC9C;AACA,wBAAwB,MAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2HAA2H,WAAW,EAAE;AACxI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA,mEAAmE,cAAc;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA,mEAAmE,cAAc;AACjaAAa;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,aAAa;AAClE;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,KAAK;AACL;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAqBE;AACF;;;;;;;;;;;;;;;;UCpsEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;ACNsD;AACjB;AACd;AAEG;AACA;AACU;AACE;AAEtCoF,oEAAiB,CAACC,6CAAa,EAAE;EAChCxK,KAAK,EAAEhE,mDAAE,CAACwO,8CAAc,CAAC;EACzB7N,IAAI,EAAE6N,6CAAa;EACnBC,QAAQ,EAAED,iDAAiB;EAC3BE,WAAW,EAAE1O,mDAAE,CAACwO,oDAAoB,CAAC;EACrChG,UAAU;EACVmG,QAAQ,EAAE;IACT/D,IAAI,EAAE,IAAI;IACVpD,SAAS,EAAE;EACZ,CAAC;EACDrH,UAAU,EAAEqO,mDAAmB;EAC/BI,IAAI,EAAExJ,6CAAI;EACVyJ,IAAI,EAAE/G,6CAAIA;AAEX,CAAC,CAAC,C","sources":["webpack://andika/./src/components/blockcontrols.js","webpack://andika/./src/components/blockhandler.js","webpack://andika/./src/components/inspectorcontrols.js","webpack://andika/./src/edit.js","webpack://andika/./src/save.js","webpack://andika/./src/transforms.js","webpack://andika/./src/utils/andika-ai.js","webpack://andika/./src/utils/andika-api.js","webpack://andika/./src/editor.scss","webpack://andika/external window [\"wp\",\"blockEditor\"]","webpack://andika/external window [\"wp\",\"blocks\"]","webpack://andika/external window [\"wp\",\"components\"]","webpack://andika/external window [\"wp\",\"data\"]","webpack://andika/external window [\"wp\",\"element\"]","webpack://andika/external window [\"wp\",\"i18n\"]","webpack://andika/./node_modules/eventsource-parser/dist/index.js","webpack://andika/./node_modules/marked/lib/marked.esm.js","webpack://andika/webpack/bootstrap","webpack://andika/webpack/runtime/compat get default export","webpack://andika/webpack/runtime/define property getters","webpack://andika/webpack/runtime/hasOwnProperty shorthand","webpack://andika/webpack/runtime/make namespace object","webpack://andika/./src/index.js"],"sourcesContent":["import { AlignmentToolbar, BlockControls } from '@wordpress/block-editor';\r\nimport { ToolbarGroup, ToolbarButton, Spinner } from '@wordpress/components';\r\nimport { __ } from '@wordpress/i18n';\r\n\r\nfunction AndikaBlockControls( props ) {\r\n    const {\r\n        attributes,\r\n        setAttributes,\r\n        isLoading,\r\n        onGenerateClick,\r\n    } = props;\r\n\r\n    return (\r\n        <BlockControls>\r\n            <ToolbarGroup>\r\n                <AlignmentToolbar\r\n                    value={attributes.alignment}\r\n                    onChange={(alignment) => setAttributes({ alignment })}\r\n                />\r\n                <ToolbarButton\r\n                    icon={isLoading ? <Spinner /> : 'lightbulb'}\r\n                    label={__('Generate Text', 'andika')}\r\n                    onClick={onGenerateClick}\r\n                    isPressed={isLoading}\r\n                    disabled={isLoading}\r\n                />\r\n            </ToolbarGroup>\r\n        \r\n        </BlockControls>\r\n    );\r\n};\r\n\r\nexport default AndikaBlockControls;","import { createBlock } from '@wordpress/blocks';\r\nimport { useDispatch, useSelect } from '@wordpress/data';\r\nimport { store as blockEditorStore } from '@wordpress/block-editor';\r\n\r\nexport const AndikaBlockHandler = (attributes, content, setAttributes, setContent, clientId) => {\r\n  const { insertBlocks, replaceBlocks, removeBlock } = useDispatch(blockEditorStore);\r\n  const {\r\n    getBlock,   \r\n    getBlockOrder,\r\n    getBlockIndex,\r\n  } = useSelect((select) => select(blockEditorStore), []);\r\n \r\n  const onSplit = (value, isOriginal) => {\r\n    if (isOriginal) {\r\n      const updatedContent = content.slice(0, content.indexOf(value));\r\n      setAttributes({ content: updatedContent });\r\n      setContent(updatedContent);\r\n    }\r\n\r\n    const newAttributes = {\r\n      ...attributes,\r\n      content: value,\r\n    };\r\n\r\n    const block = createBlock(\"andika-block/andika\", newAttributes);\r\n    return block;\r\n  };\r\n\r\n  const onReplace = (blocks, clientId) => {\r\n    replaceBlocks(clientId, blocks.map((block, index) =>\r\n      (index === 0 && block.name === \"andika-block/andika\")\r\n        ? {\r\n            ...block,\r\n            ...attributes,\r\n            ...block.attributes,\r\n          }\r\n        : block\r\n    ));\r\n  };\r\n\r\n  const onMerge = (clientId) => {\r\n    const blockIndex = getBlockIndex(clientId);\r\n    const blockOrder = getBlockOrder();\r\n  \r\n    // Merge with the previous block\r\n    const prevBlockIndex = blockIndex - 1;\r\n    const prevBlockClientId = blockOrder[prevBlockIndex];\r\n  \r\n    if (prevBlockClientId) {\r\n      const prevBlock = getBlock(prevBlockClientId);\r\n  \r\n      if (prevBlock.name === \"andika-block/andika\") {\r\n        const mergedContent = prevBlock.attributes.content + content;\r\n  \r\n        setAttributes({ content: mergedContent });\r\n        setContent(mergedContent);\r\n  \r\n        removeBlock(prevBlockClientId);\r\n        return;\r\n      }\r\n    }\r\n  \r\n    // Merge with the next block\r\n    const nextBlockIndex = blockIndex + 1;\r\n    const nextBlockClientId = blockOrder[nextBlockIndex];\r\n  \r\n    if (nextBlockClientId) {\r\n      const nextBlock = getBlock(nextBlockClientId);\r\n  \r\n      if (nextBlock.name === \"andika-block/andika\") {\r\n        const mergedContent = content + nextBlock.attributes.content;\r\n  \r\n        setAttributes({ content: mergedContent });\r\n        setContent(mergedContent);\r\n  \r\n        removeBlock(nextBlockClientId);\r\n      }\r\n    }\r\n  };\r\n \r\n  return { onSplit, onReplace, onMerge };\r\n};\r\nexport default AndikaBlockHandler;","import { __ } from '@wordpress/i18n';\r\nimport {\r\n    InspectorControls,\r\n    PanelColorSettings,\r\n    FontSizePicker,\r\n} from '@wordpress/block-editor';\r\nimport { PanelBody, RangeControl, SelectControl } from '@wordpress/components';\r\n\r\nconst AndikaInspectorControls = ({\r\n    attributes,\r\n    setAttributes,\r\n}) => {\r\n    const { lineHeight } = attributes;     \r\n\r\n    const onChangeLineHeight = (value) => {\r\n        setAttributes({ lineHeight: value });\r\n    };\r\n\r\n    return (\r\n        <InspectorControls>\r\n            <PanelBody title={__('Andika Controls', 'andika')}>\r\n                <SelectControl\r\n                    label={__('Text Length', 'andika')}\r\n                    value={attributes.andikaTextLength}\r\n                    options={[\r\n                        { label: 'Short', value: 'short' },\r\n                        { label: 'Medium', value: 'medium' },\r\n                        { label: 'Long', value: 'long' },\r\n                    ]}\r\n                    onChange={(value) => setAttributes({ andikaTextLength: value })}\r\n                />\r\n            </PanelBody>\r\n            <PanelBody title={__('Typography', 'andika')}>           \r\n                <FontSizePicker\r\n                    value={attributes.fontSize}\r\n                    onChange={(value) => setAttributes({ fontSize: value })}\r\n                    __nextHasNoMarginBottom={true}\r\n                />\r\n                <RangeControl\r\n                    label={__('Line height', 'andika')}\r\n                    value={lineHeight}\r\n                    onChange={onChangeLineHeight}\r\n                    min={1}\r\n                    max={3}\r\n                    step={0.1}\r\n                />\r\n            </PanelBody>\r\n            <PanelColorSettings\r\n                title={__('Color settings', 'andika')}\r\n                initialOpen={false}\r\n                colorSettings={[\r\n                    {\r\n                        value: attributes.textColor,\r\n                        onChange: (value) => setAttributes({ textColor: value }),\r\n                        label: __('Text color', 'andika'),\r\n                    },\r\n                    {\r\n                        value: attributes.backgroundColor,\r\n                        onChange: (value) => setAttributes({ backgroundColor: value }),\r\n                        label: __('Background color', 'andika'),\r\n                    }\r\n                ]}\r\n            >\r\n            </PanelColorSettings>\r\n\r\n        </InspectorControls>\r\n    );\r\n};\r\n\r\nexport default AndikaInspectorControls;","import { __ } from '@wordpress/i18n';\r\nimport { useSelect, useDispatch } from '@wordpress/data';\r\nimport { useBlockProps, store as blockEditorStore } from '@wordpress/block-editor';\r\nimport { Fragment, useState, useCallback, useEffect, useRef } from '@wordpress/element';\r\nimport { RichText } from '@wordpress/block-editor';\r\n\r\nimport { generateText } from './utils/andika-ai';\r\n\r\n// Local imports\r\nimport AndikaBlockHandler from './components/blockhandler';\r\nimport AndikaBlockControls from './components/blockcontrols';\r\nimport AndikaInspectorControls from './components/inspectorcontrols';\r\n\r\nexport default function Edit({\r\n  attributes,\r\n  setAttributes,\r\n  isSelected,\r\n  clientId,\r\n}) {\r\n  const { content: contentAttr, alignment, fontSize, textColor, backgroundColor } = attributes;\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [content, setContent] = useState(contentAttr || '');\r\n\r\n  const {\r\n    onSplit,\r\n    onMerge,\r\n    onReplace,\r\n  } = AndikaBlockHandler(attributes, content, setAttributes, setContent, clientId);\r\n  const RichTextRef = useRef();\r\n  const blockProps = useBlockProps();\r\n  const { insertBlocks } = useDispatch(blockEditorStore);\r\n  const { createNotice } = useDispatch('core/notices');\r\n\r\n  const postTitle = useSelect((select) =>\r\n    select('core/editor').getEditedPostAttribute('title')\r\n  );\r\n\r\n  const previousBlocks = useSelect((select) =>\r\n    select(blockEditorStore).getBlocks()\r\n  );\r\n\r\n  const previousContent = previousBlocks.length > 0\r\n    ? previousBlocks\r\n        .slice(0, -1)\r\n        .map((block) => block.attributes.content)\r\n        .join('\\n')\r\n    : '';\r\n\r\n    // Function to set the caret position in the RichText component.\r\n    const setCaretPosition = (editableRef) => {\r\n      if (!editableRef.current) return;\r\n  \r\n      const range = document.createRange();\r\n      const sel = window.getSelection();\r\n  \r\n      if (content === '') {\r\n        // Set the caret to the start of the placeholder when the content is empty\r\n        range.setStart(editableRef.current, 0);\r\n      } else {\r\n        const lastChild = editableRef.current.lastChild;\r\n        if (lastChild) {\r\n          // Set the caret to the end of the content when content is not empty\r\n          range.setStartAfter(lastChild);\r\n        }\r\n      }\r\n  \r\n      range.collapse(true);\r\n      sel.removeAllRanges();\r\n      sel.addRange(range);\r\n      editableRef.current.focus();\r\n    };\r\n    \r\n\r\n  useEffect(() => {\r\n    setCaretPosition(RichTextRef);\r\n    setAttributes({ content });\r\n  }, [content, setAttributes]);\r\n\r\n  const onGenerateClick = useCallback(async () => {\r\n    setIsLoading(true);\r\n  \r\n    const prompt = `Title: ${postTitle}\\n\\n${previousContent}\\n\\n${content}`;\r\n\r\n    // Get the 'andikaTextLength' attribute\r\n    const andikaTextLength = attributes.andikaTextLength;\r\n  \r\n    try {\r\n      await generateText(prompt, content, setContent, insertBlocks, clientId, andikaTextLength);\r\n    } catch (error) {\r\n      createNotice('error', `Text generation failed: ${error.message}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [content, postTitle, previousContent, setContent, insertBlocks, clientId, attributes.andikaTextLength]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <AndikaBlockControls\r\n        attributes={attributes}\r\n        setAttributes={setAttributes}\r\n        isLoading={isLoading}\r\n        onGenerateClick={onGenerateClick}\r\n      />\r\n      <AndikaInspectorControls\r\n        attributes={attributes}\r\n        setAttributes={setAttributes}\r\n      />\r\n      <RichText\r\n        ref={RichTextRef}\r\n        tagName=\"div\"\r\n        value={content}\r\n        onChange={(newContent) => {\r\n          setContent(newContent);\r\n          setAttributes({ content: newContent });\r\n        }}\r\n        className=\"andika-placeholder\"\r\n        placeholder={__(\r\n          'Type and click the lightbulb icon to generate text...',\r\n          'andika',\r\n        )}\r\n        isSelected={isSelected}\r\n        style={{\r\n          textAlign: alignment,\r\n          fontSize: fontSize,\r\n          color: textColor,\r\n          backgroundColor: backgroundColor,\r\n        }}\r\n        onSplit={onSplit}\r\n        onReplace={(blocks) => onReplace(blocks, clientId)}\r\n        onRemove={() => onReplace([])}\r\n        onMerge={() => onMerge(clientId)}\r\n      />\r\n    </Fragment>\r\n  );\r\n}","import { RichText } from '@wordpress/block-editor';\r\n\r\nexport default function Save({ attributes }) {\r\n    return (\r\n        <RichText.Content\r\n            tagName=\"p\"\r\n            value={attributes.content}\r\n            style={{\r\n                textAlign: attributes.alignment,\r\n                fontSize: attributes.fontSize,\r\n                color: attributes.textColor,\r\n                backgroundColor: attributes.backgroundColor,\r\n            }}\r\n        />\r\n    );\r\n}\r\n","import { createBlock } from \"@wordpress/blocks\";\r\n\r\nconst elementToLevel = { h1: 1, h2: 2, h3: 3, h4: 4, h5: 5, h6: 6 };\r\nconst levelToElement = { 1: 'h1', 2: 'h2', 3: 'h3', 4: 'h4', 5: 'h5', 6: 'h6' };\r\n\r\nconst transforms = {\r\n    from: [\r\n        {\r\n            type:  'block',\r\n            blocks: ['core/paragraph'],\r\n            transform: ( { content }) => {\r\n                return createBlock('andika-block/andika', {\r\n                    content,\r\n                });\r\n            },\r\n        },\r\n        {\r\n            type:  'block',\r\n            blocks: ['core/heading'],\r\n            transform: ( { content, level }) => {\r\n                return createBlock('andika-block/andika', {\r\n                    content,\r\n                    element: levelToElement[level],\r\n                });\r\n            }            \r\n        },\r\n        \r\n    ],\r\n    to: [\r\n            {\r\n                type: 'block',\r\n                blocks: ['core/paragraph'],\r\n                transform: ( { content }) => {\r\n                    return createBlock('core/paragraph', {\r\n                        content,\r\n                    });\r\n                },\r\n            },\r\n            {\r\n                type: 'block',\r\n                blocks: ['core/heading'],\r\n                transform: ( { content, element }) => {\r\n                    return createBlock('core/heading', {\r\n                        content,\r\n                        level: elementToLevel.hasOwnProperty(element) ? elementToLevel[element] : 2,\r\n                    });\r\n                },                \r\n            },\r\n            \r\n        ],\r\n};   \r\n\r\n\r\nexport default transforms;","import { createBlock } from '@wordpress/blocks';\r\nimport AndikaOpenAI from './andika-api';\r\nimport { marked } from 'marked';\r\n\r\n// Generates text using the Andika API and inserts it as blocks in the WordPress editor\r\nexport async function generateText(prompt, content, setContent, insertBlocks, clientId, andikaTextLength) {\r\n  const andikaAPI = new AndikaOpenAI(andika);\r\n\r\n  let buffer = '';\r\n\r\n  // Handles the streaming events returned by the OpenAI API\r\n  const andikaStreamEvents = async (event) => {\r\n    if (event.type === 'event') {\r\n      if (event.data !== \"[DONE]\") {\r\n        try {\r\n          const parsedData = JSON.parse(event.data);\r\n          const text =\r\n            parsedData.choices[0]?.text ??\r\n            parsedData.choices[0]?.message?.content ??\r\n            parsedData.choices[0]?.delta?.content ??\r\n            '';\r\n\r\n          const sanitizedText = text.replace(/^\\n{1,2}/, '');          \r\n\r\n          if (sanitizedText) {\r\n            buffer += sanitizedText;\r\n  \r\n            if (buffer.includes('\\n')) {  \r\n              const paragraphs = buffer.split(/\\n+/);  \r\n              const validParagraphs = paragraphs.filter((paragraph) => paragraph.trim() !== '');                \r\n              const htmlParagraphs = validParagraphs.map((paragraph) => marked(paragraph));\r\n\r\n                \r\n                const blocks = htmlParagraphs.map((html) => {\r\n                  // Check if the HTML is a list\r\n                  const isList = /^<ul>|<ol>/.test(html.trim());\r\n                  // Check if the HTML is a table\r\n                  const isTable = /^<table>/.test(html.trim());\r\n                \r\n                  if (isList) {\r\n                    // If it's a list, create a 'core/list' block\r\n                    return createBlock('core/list', { values: html });\r\n                  } else if (isTable) {\r\n                    // If it's a table, create a 'core/table' block\r\n                    return createBlock('core/table', { values: html });\r\n                  } else {\r\n                    // Otherwise, create a 'andika-block/andika' block\r\n                    return createBlock('andika-block/andika', { content: html });\r\n                  }\r\n                });\r\n                \r\n              \r\n\r\n              \r\n              \r\n              const index = wp.data.select('core/block-editor').getBlockIndex(clientId);\r\n              if (content && content !== htmlParagraphs[0]) { \r\n                const updatedBlock = createBlock('andika-block/andika', { content: content + htmlParagraphs[0] });\r\n                wp.data.dispatch('core/block-editor').replaceBlock(clientId, updatedBlock);\r\n                const remainingBlocks = blocks.slice(1);\r\n                insertBlocks(remainingBlocks, index + 1);\r\n              } else {\r\n                insertBlocks(blocks, index);\r\n              }\r\n              buffer = '';\r\n            } else {\r\n              setContent(content + buffer);\r\n              \r\n            }\r\n            }\r\n          }       \r\n       catch (e) {\r\n          throw new Error('Error parsing JSON: ' + e.message);\r\n        }\r\n      }\r\n    }\r\n  };  \r\n\r\n  // Set the maximum number of tokens to generate based on the specified text length\r\n  let maxTokens;\r\n\r\n  switch (andikaTextLength) {\r\n    case 'short':\r\n      maxTokens = 24;\r\n      break;\r\n    case 'medium':\r\n      maxTokens = 48;\r\n      break;\r\n    case 'long':\r\n      maxTokens = 96;\r\n      break;\r\n    default:\r\n      maxTokens = 48;\r\n  }\r\n\r\n  // Call the Andika API to generate text and handle the streaming events\r\n  try {\r\n    await andikaAPI.andikaText(prompt, andikaStreamEvents, { max_tokens: maxTokens });\r\n  } catch (error) {\r\n    throw new Error('Error in generateText: ' + error.message);\r\n  }\r\n}","import { createParser } from \"eventsource-parser\";\r\n\r\nconst API_BASE_URL = 'https://api.openai.com/v1/';\r\n\r\nclass AndikaOpenAI {\r\n  constructor(options) {\r\n    this.apiKey = options.api_key;\r\n    this.model = options.model;\r\n    this.temperature = parseFloat(options.temperature);\r\n    this.top_p = parseFloat(options.topP);\r\n    this.frequency_penalty = parseFloat(options.frequencyPenalty);\r\n    this.presence_penalty = parseFloat(options.presencePenalty);\r\n    this.stream = options.stream === \"1\" ? true : false;\r\n  }\r\n\r\n  get_api_url() {\r\n    return `${API_BASE_URL}chat/completions`;\r\n  }\r\n\r\n  async andikaText(prompt, callback, options = {}) {\r\n    const url = this.get_api_url();\r\n\r\n    const body = {\r\n      model: this.model,\r\n      temperature: this.temperature,\r\n      top_p: this.top_p,\r\n      frequency_penalty: this.frequency_penalty,\r\n      presence_penalty: this.presence_penalty,\r\n      stream: this.stream,\r\n      n: 1,\r\n      max_tokens: options.max_tokens,\r\n      ...options,\r\n      messages: [{role:'user', content:prompt}]\r\n    };\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.apiKey}`,\r\n      },\r\n      body: JSON.stringify(body),\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, requestOptions);\r\n      if (!response.ok) {\r\n        // Log the error response\r\n        const errorData = await response.json();\r\n        console.error('Error response from OpenAI API:', errorData);\r\n        throw new Error(response.statusText);\r\n      }\r\n\r\n      const parser = createParser(callback)\r\n      const reader = response.body.getReader();\r\n      const decoder = new TextDecoder();        \r\n\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) {\r\n          break;\r\n        }\r\n        parser.feed(decoder.decode(value));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error generating text:', error);\r\n      return 'Error generating text! Check your API Key?';\r\n    }\r\n  }\r\n}\r\n\r\nexport default AndikaOpenAI;","// extracted by mini-css-extract-plugin\nexport {};","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","function createParser(onParse) {\n  let isFirstChunk;\n  let buffer;\n  let startingPosition;\n  let startingFieldLength;\n  let eventId;\n  let eventName;\n  let data;\n  reset();\n  return {\n    feed,\n    reset\n  };\n  function reset() {\n    isFirstChunk = true;\n    buffer = \"\";\n    startingPosition = 0;\n    startingFieldLength = -1;\n    eventId = void 0;\n    eventName = void 0;\n    data = \"\";\n  }\n  function feed(chunk) {\n    buffer = buffer ? buffer + chunk : chunk;\n    if (isFirstChunk && hasBom(buffer)) {\n      buffer = buffer.slice(BOM.length);\n    }\n    isFirstChunk = false;\n    const length = buffer.length;\n    let position = 0;\n    let discardTrailingNewline = false;\n    while (position < length) {\n      if (discardTrailingNewline) {\n        if (buffer[position] === \"\\n\") {\n          ++position;\n        }\n        discardTrailingNewline = false;\n      }\n      let lineLength = -1;\n      let fieldLength = startingFieldLength;\n      let character;\n      for (let index = startingPosition; lineLength < 0 && index < length; ++index) {\n        character = buffer[index];\n        if (character === \":\" && fieldLength < 0) {\n          fieldLength = index - position;\n        } else if (character === \"\\r\") {\n          discardTrailingNewline = true;\n          lineLength = index - position;\n        } else if (character === \"\\n\") {\n          lineLength = index - position;\n        }\n      }\n      if (lineLength < 0) {\n        startingPosition = length - position;\n        startingFieldLength = fieldLength;\n        break;\n      } else {\n        startingPosition = 0;\n        startingFieldLength = -1;\n      }\n      parseEventStreamLine(buffer, position, fieldLength, lineLength);\n      position += lineLength + 1;\n    }\n    if (position === length) {\n      buffer = \"\";\n    } else if (position > 0) {\n      buffer = buffer.slice(position);\n    }\n  }\n  function parseEventStreamLine(lineBuffer, index, fieldLength, lineLength) {\n    if (lineLength === 0) {\n      if (data.length > 0) {\n        onParse({\n          type: \"event\",\n          id: eventId,\n          event: eventName || void 0,\n          data: data.slice(0, -1)\n          // remove trailing newline\n        });\n\n        data = \"\";\n        eventId = void 0;\n      }\n      eventName = void 0;\n      return;\n    }\n    const noValue = fieldLength < 0;\n    const field = lineBuffer.slice(index, index + (noValue ? lineLength : fieldLength));\n    let step = 0;\n    if (noValue) {\n      step = lineLength;\n    } else if (lineBuffer[index + fieldLength + 1] === \" \") {\n      step = fieldLength + 2;\n    } else {\n      step = fieldLength + 1;\n    }\n    const position = index + step;\n    const valueLength = lineLength - step;\n    const value = lineBuffer.slice(position, position + valueLength).toString();\n    if (field === \"data\") {\n      data += value ? \"\".concat(value, \"\\n\") : \"\\n\";\n    } else if (field === \"event\") {\n      eventName = value;\n    } else if (field === \"id\" && !value.includes(\"\\0\")) {\n      eventId = value;\n    } else if (field === \"retry\") {\n      const retry = parseInt(value, 10);\n      if (!Number.isNaN(retry)) {\n        onParse({\n          type: \"reconnect-interval\",\n          value: retry\n        });\n      }\n    }\n  }\n}\nconst BOM = [239, 187, 191];\nfunction hasBom(buffer) {\n  return BOM.every((charCode, index) => buffer.charCodeAt(index) === charCode);\n}\nexport { createParser };\n//# sourceMappingURL=index.js.map\n","/**\n * marked v6.0.0 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// src/defaults.ts\nfunction _getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: \"\",\n    highlight: null,\n    hooks: null,\n    langPrefix: \"language-\",\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\nvar _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n  _defaults = newDefaults;\n}\n\n// src/helpers.ts\nvar escapeTest = /[&<>\"']/;\nvar escapeReplace = new RegExp(escapeTest.source, \"g\");\nvar escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nvar escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, \"g\");\nvar escapeReplacements = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\"\n};\nvar getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html;\n}\nvar unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === \"colon\")\n      return \":\";\n    if (n.charAt(0) === \"#\") {\n      return n.charAt(1) === \"x\" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n    return \"\";\n  });\n}\nvar caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n  regex = typeof regex === \"string\" ? regex : regex.source;\n  opt = opt || \"\";\n  const obj = {\n    replace: (name, val) => {\n      val = typeof val === \"object\" && \"source\" in val ? val.source : val;\n      val = val.replace(caret, \"$1\");\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\nvar nonWordAndColonTest = /[^\\w:]/g;\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, \"\").toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf(\"javascript:\") === 0 || prot.indexOf(\"vbscript:\") === 0 || prot.indexOf(\"data:\") === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, \"%\");\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\nvar baseUrls = {};\nvar justDomain = /^[^:]+:\\/*[^/]*$/;\nvar protocol = /^([^:]+:)[\\s\\S]*$/;\nvar domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\nfunction resolveUrl(base, href) {\n  if (!baseUrls[\" \" + base]) {\n    if (justDomain.test(base)) {\n      baseUrls[\" \" + base] = base + \"/\";\n    } else {\n      baseUrls[\" \" + base] = rtrim(base, \"/\", true);\n    }\n  }\n  base = baseUrls[\" \" + base];\n  const relativeBase = base.indexOf(\":\") === -1;\n  if (href.substring(0, 2) === \"//\") {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, \"$1\") + href;\n  } else if (href.charAt(0) === \"/\") {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, \"$1\") + href;\n  } else {\n    return base + href;\n  }\n}\nvar noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n    let escaped = false, curr = offset;\n    while (--curr >= 0 && str[curr] === \"\\\\\")\n      escaped = !escaped;\n    if (escaped) {\n      return \"|\";\n    } else {\n      return \" |\";\n    }\n  }), cells = row.split(/ \\|/);\n  let i = 0;\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count)\n      cells.push(\"\");\n  }\n  for (; i < cells.length; i++) {\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, \"|\");\n  }\n  return cells;\n}\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return \"\";\n  }\n  let suffLen = 0;\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0, i = 0;\n  for (; i < l; i++) {\n    if (str[i] === \"\\\\\") {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\nfunction checkDeprecations(opt, callback) {\n  if (!opt || opt.silent) {\n    return;\n  }\n  if (callback) {\n    console.warn(\"marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async\");\n  }\n  if (opt.sanitize || opt.sanitizer) {\n    console.warn(\"marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options\");\n  }\n  if (opt.highlight || opt.langPrefix !== \"language-\") {\n    console.warn(\"marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.\");\n  }\n  if (opt.mangle) {\n    console.warn(\"marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.\");\n  }\n  if (opt.baseUrl) {\n    console.warn(\"marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.\");\n  }\n  if (opt.smartypants) {\n    console.warn(\"marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.\");\n  }\n  if (opt.xhtml) {\n    console.warn(\"marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.\");\n  }\n  if (opt.headerIds || opt.headerPrefix) {\n    console.warn(\"marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.\");\n  }\n}\n\n// src/Tokenizer.ts\nfunction outputLink(cap, link, raw, lexer2) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, \"$1\");\n  if (cap[0].charAt(0) !== \"!\") {\n    lexer2.state.inLink = true;\n    const token = {\n      type: \"link\",\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer2.inlineTokens(text)\n    };\n    lexer2.state.inLink = false;\n    return token;\n  }\n  return {\n    type: \"image\",\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  const indentToCode = matchIndentToCode[1];\n  return text.split(\"\\n\").map((node) => {\n    const matchIndentInNode = node.match(/^\\s+/);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    const [indentInNode] = matchIndentInNode;\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join(\"\\n\");\n}\nvar _Tokenizer = class {\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: \"space\",\n        raw: cap[0]\n      };\n    }\n  }\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, \"\");\n      return {\n        type: \"code\",\n        raw: cap[0],\n        codeBlockStyle: \"indented\",\n        text: !this.options.pedantic ? rtrim(text, \"\\n\") : text\n      };\n    }\n  }\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || \"\");\n      return {\n        type: \"code\",\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, \"$1\") : cap[2],\n        text\n      };\n    }\n  }\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, \"#\");\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          text = trimmed.trim();\n        }\n      }\n      return {\n        type: \"heading\",\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: \"hr\",\n        raw: cap[0]\n      };\n    }\n  }\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, \"\");\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: \"blockquote\",\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n      const list = {\n        type: \"list\",\n        raw: \"\",\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : \"\",\n        loose: false,\n        items: []\n      };\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n      if (this.options.pedantic) {\n        bull = isordered ? bull : \"[*+-]\";\n      }\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\t ][^\\\\n]*)?(?:\\\\n|$))`);\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n        if (this.rules.block.hr.test(src)) {\n          break;\n        }\n        raw = cap[0];\n        src = src.substring(raw.length);\n        line = cap[2].split(\"\\n\", 1)[0].replace(/^\\t+/, (t) => \" \".repeat(3 * t.length));\n        nextLine = src.split(\"\\n\", 1)[0];\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/);\n          indent = indent > 4 ? 1 : indent;\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n        blankLine = false;\n        if (!line && /^ *$/.test(nextLine)) {\n          raw += nextLine + \"\\n\";\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n          while (src) {\n            rawLine = src.split(\"\\n\", 1)[0];\n            nextLine = rawLine;\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, \"  \");\n            }\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n            if (hrRegex.test(src)) {\n              break;\n            }\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {\n              itemContents += \"\\n\" + nextLine.slice(indent);\n            } else {\n              if (blankLine) {\n                break;\n              }\n              if (line.search(/[^ ]/) >= 4) {\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n              itemContents += \"\\n\" + nextLine;\n            }\n            if (!blankLine && !nextLine.trim()) {\n              blankLine = true;\n            }\n            raw += rawLine + \"\\n\";\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n        if (!list.loose) {\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== \"[ ] \";\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, \"\");\n          }\n        }\n        list.items.push({\n          type: \"list_item\",\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n        list.raw += raw;\n      }\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n      const l = list.items.length;\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        if (!list.loose) {\n          const spacers = list.items[i].tokens.filter((t) => t.type === \"space\");\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some((t) => /\\n.*\\n/.test(t.raw));\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n      return list;\n    }\n  }\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: \"html\",\n        block: true,\n        raw: cap[0],\n        pre: !this.options.sanitizer && (cap[1] === \"pre\" || cap[1] === \"script\" || cap[1] === \"style\"),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        const paragraph = token;\n        paragraph.type = \"paragraph\";\n        paragraph.text = text;\n        paragraph.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, \" \");\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, \"$1\").replace(this.rules.inline._escapes, \"$1\") : \"\";\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, \"$1\") : cap[3];\n      return {\n        type: \"def\",\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: \"table\",\n        // splitCells expects a number as second argument\n        // @ts-expect-error\n        header: splitCells(cap[1]).map((c) => {\n          return { text: c };\n        }),\n        align: cap[2].replace(/^ *|\\| *$/g, \"\").split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, \"\").split(\"\\n\") : []\n      };\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = \"right\";\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = \"center\";\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = \"left\";\n          } else {\n            item.align[i] = null;\n          }\n        }\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map((c) => {\n            return { text: c };\n          });\n        }\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n        return item;\n      }\n    }\n  }\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: \"heading\",\n        raw: cap[0],\n        depth: cap[2].charAt(0) === \"=\" ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === \"\\n\" ? cap[1].slice(0, -1) : cap[1];\n      return {\n        type: \"paragraph\",\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: \"text\",\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: \"escape\",\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n      return {\n        type: this.options.sanitize ? \"text\" : \"html\",\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]\n      };\n    }\n  }\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        if (!/>$/.test(trimmedUrl)) {\n          return;\n        }\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), \"\\\\\");\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        const lastParenIndex = findClosingBracket(cap[2], \"()\");\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf(\"!\") === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = \"\";\n        }\n      }\n      let href = cap[2];\n      let title = \"\";\n      if (this.options.pedantic) {\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : \"\";\n      }\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, \"$1\") : href,\n        title: title ? title.replace(this.rules.inline._escapes, \"$1\") : title\n      }, cap[0], this.lexer);\n    }\n  }\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, \" \");\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: \"text\",\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n  emStrong(src, maskedSrc, prevChar = \"\") {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match)\n      return;\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n      return;\n    const nextChar = match[1] || match[2] || \"\";\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n      const endReg = match[0][0] === \"*\" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim)\n          continue;\n        rLength = rDelim.length;\n        if (match[3] || match[4]) {\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue;\n          }\n        }\n        delimTotal -= rLength;\n        if (delimTotal > 0)\n          continue;\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        const raw = src.slice(0, lLength + match.index + rLength + 1);\n        if (Math.min(lLength, rLength) % 2) {\n          const text2 = raw.slice(1, -1);\n          return {\n            type: \"em\",\n            raw,\n            text: text2,\n            tokens: this.lexer.inlineTokens(text2)\n          };\n        }\n        const text = raw.slice(2, -2);\n        return {\n          type: \"strong\",\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, \" \");\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: \"codespan\",\n        raw: cap[0],\n        text\n      };\n    }\n  }\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: \"br\",\n        raw: cap[0]\n      };\n    }\n  }\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: \"del\",\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n  autolink(src, mangle2) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === \"@\") {\n        text = escape(this.options.mangle ? mangle2(cap[1]) : cap[1]);\n        href = \"mailto:\" + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      return {\n        type: \"link\",\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: \"text\",\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n  url(src, mangle2) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === \"@\") {\n        text = escape(this.options.mangle ? mangle2(cap[0]) : cap[0]);\n        href = \"mailto:\" + text;\n      } else {\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === \"www.\") {\n          href = \"http://\" + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: \"link\",\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: \"text\",\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n  inlineText(src, smartypants2) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants2(cap[0]) : cap[0]);\n      }\n      return {\n        type: \"text\",\n        raw: cap[0],\n        text\n      };\n    }\n  }\n};\n\n// src/rules.ts\nvar block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: \"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$))\",\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def).replace(\"label\", block._label).replace(\"title\", block._title).getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */).replace(\"bull\", block.bullet).getRegex();\nblock.list = edit(block.list).replace(/bull/g, block.bullet).replace(\"hr\", \"\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))\").replace(\"def\", \"\\\\n+(?=\" + block.def.source + \")\").getRegex();\nblock._tag = \"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\";\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, \"i\").replace(\"comment\", block._comment).replace(\"tag\", block._tag).replace(\"attribute\", / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nblock.lheading = edit(block.lheading).replace(/bull/g, block.bullet).getRegex();\nblock.paragraph = edit(block._paragraph).replace(\"hr\", block.hr).replace(\"heading\", \" {0,3}#{1,6} \").replace(\"|lheading\", \"\").replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", block._tag).getRegex();\nblock.blockquote = edit(block.blockquote).replace(\"paragraph\", block.paragraph).getRegex();\nblock.normal = { ...block };\nblock.gfm = {\n  ...block.normal,\n  table: \"^ *([^\\\\n ].*\\\\|.*)\\\\n {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\"\n  // Cells\n};\nblock.gfm.table = edit(block.gfm.table).replace(\"hr\", block.hr).replace(\"heading\", \" {0,3}#{1,6} \").replace(\"blockquote\", \" {0,3}>\").replace(\"code\", \" {4}[^\\\\n]\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", block._tag).getRegex();\nblock.gfm.paragraph = edit(block._paragraph).replace(\"hr\", block.hr).replace(\"heading\", \" {0,3}#{1,6} \").replace(\"|lheading\", \"\").replace(\"table\", block.gfm.table).replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", block._tag).getRegex();\nblock.pedantic = {\n  ...block.normal,\n  html: edit(\n    `^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\\\s[^'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))`\n  ).replace(\"comment\", block._comment).replace(/tag/g, \"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph).replace(\"hr\", block.hr).replace(\"heading\", \" *#{1,6} *[^\\n]\").replace(\"lheading\", block.lheading).replace(\"blockquote\", \" {0,3}>\").replace(\"|fences\", \"\").replace(\"|list\", \"\").replace(\"|html\", \"\").getRegex()\n};\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: \"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\",\n  // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: \"reflink|nolink(?!\\\\()\",\n  emStrong: {\n    lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n    rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/\n    // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^((?![*_])[\\spunctuation])/\n};\ninline._punctuation = \"\\\\p{P}$+<=>`^|~\";\ninline.punctuation = edit(inline.punctuation, \"u\").replace(/punctuation/g, inline._punctuation).getRegex();\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace(\"(?:-->|$)\", \"-->\").getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, \"u\").replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, \"gu\").replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, \"gu\").replace(/punct/g, inline._punctuation).getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation, \"gu\").replace(/punct/g, inline._punctuation).getRegex();\ninline._escapes = edit(inline._escapes, \"gu\").replace(/punct/g, inline._punctuation).getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink).replace(\"scheme\", inline._scheme).replace(\"email\", inline._email).getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag).replace(\"comment\", inline._comment).replace(\"attribute\", inline._attribute).getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link).replace(\"label\", inline._label).replace(\"href\", inline._href).replace(\"title\", inline._title).getRegex();\ninline.reflink = edit(inline.reflink).replace(\"label\", inline._label).replace(\"ref\", block._label).getRegex();\ninline.nolink = edit(inline.nolink).replace(\"ref\", block._label).getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, \"g\").replace(\"reflink\", inline.reflink).replace(\"nolink\", inline.nolink).getRegex();\ninline.normal = { ...inline };\ninline.pedantic = {\n  ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\", inline._label).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\", inline._label).getRegex()\n};\ninline.gfm = {\n  ...inline.normal,\n  escape: edit(inline.escape).replace(\"])\", \"~|])\").getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\ninline.gfm.url = edit(inline.gfm.url, \"i\").replace(\"email\", inline.gfm._extended_email).getRegex();\ninline.breaks = {\n  ...inline.gfm,\n  br: edit(inline.br).replace(\"{2,}\", \"*\").getRegex(),\n  text: edit(inline.gfm.text).replace(\"\\\\b_\", \"\\\\b_| {2,}\\\\n\").replace(/\\{2,\\}/g, \"*\").getRegex()\n};\n\n// src/Lexer.ts\nfunction smartypants(text) {\n  return text.replace(/---/g, \"\\u2014\").replace(/--/g, \"\\u2013\").replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\").replace(/'/g, \"\\u2019\").replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201C\").replace(/\"/g, \"\\u201D\").replace(/\\.{3}/g, \"\\u2026\");\n}\nfunction mangle(text) {\n  let out = \"\", i, ch;\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = \"x\" + ch.toString(16);\n    }\n    out += \"&#\" + ch + \";\";\n  }\n  return out;\n}\nvar _Lexer = class {\n  constructor(options2) {\n    this.tokens = [];\n    this.tokens.links = /* @__PURE__ */ Object.create(null);\n    this.options = options2 || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options2) {\n    const lexer2 = new _Lexer(options2);\n    return lexer2.lex(src);\n  }\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options2) {\n    const lexer2 = new _Lexer(options2);\n    return lexer2.inlineTokens(src);\n  }\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src.replace(/\\r\\n|\\r/g, \"\\n\");\n    this.blockTokens(src, this.tokens);\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n    return this.tokens;\n  }\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, \"    \").replace(/^ +$/gm, \"\");\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + \"    \".repeat(tabs.length);\n      });\n    }\n    let token, lastToken, cutSrc, lastParagraphClipped;\n    while (src) {\n      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          tokens[tokens.length - 1].raw += \"\\n\";\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === \"paragraph\" || lastToken.type === \"text\")) {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === \"paragraph\" || lastToken.type === \"text\")) {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === \"number\" && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === \"paragraph\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    this.state.top = true;\n    return tokens;\n  }\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf(\"[\") + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + \"[\" + \"a\".repeat(match[0].length - 2) + \"]\" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + \"[\" + \"a\".repeat(match[0].length - 2) + \"]\" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + \"++\" + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = \"\";\n      }\n      keepPrevChar = false;\n      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === \"text\" && lastToken.type === \"text\") {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === \"text\" && lastToken.type === \"text\") {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === \"number\" && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== \"_\") {\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === \"text\") {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    return tokens;\n  }\n};\n\n// src/Renderer.ts\nvar _Renderer = class {\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  code(code, infostring, escaped) {\n    const lang = (infostring || \"\").match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n    code = code.replace(/\\n$/, \"\") + \"\\n\";\n    if (!lang) {\n      return \"<pre><code>\" + (escaped ? code : escape(code, true)) + \"</code></pre>\\n\";\n    }\n    return '<pre><code class=\"' + this.options.langPrefix + escape(lang) + '\">' + (escaped ? code : escape(code, true)) + \"</code></pre>\\n\";\n  }\n  blockquote(quote) {\n    return `<blockquote>\n${quote}</blockquote>\n`;\n  }\n  html(html, block2) {\n    return html;\n  }\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\n`;\n    }\n    return `<h${level}>${text}</h${level}>\n`;\n  }\n  hr() {\n    return this.options.xhtml ? \"<hr/>\\n\" : \"<hr>\\n\";\n  }\n  list(body, ordered, start) {\n    const type = ordered ? \"ol\" : \"ul\", startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : \"\";\n    return \"<\" + type + startatt + \">\\n\" + body + \"</\" + type + \">\\n\";\n  }\n  listitem(text, task, checked) {\n    return `<li>${text}</li>\n`;\n  }\n  checkbox(checked) {\n    return \"<input \" + (checked ? 'checked=\"\" ' : \"\") + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? \" /\" : \"\") + \"> \";\n  }\n  paragraph(text) {\n    return `<p>${text}</p>\n`;\n  }\n  table(header, body) {\n    if (body)\n      body = `<tbody>${body}</tbody>`;\n    return \"<table>\\n<thead>\\n\" + header + \"</thead>\\n\" + body + \"</table>\\n\";\n  }\n  tablerow(content) {\n    return `<tr>\n${content}</tr>\n`;\n  }\n  tablecell(content, flags) {\n    const type = flags.header ? \"th\" : \"td\";\n    const tag = flags.align ? `<${type} align=\"${flags.align}\">` : `<${type}>`;\n    return tag + content + `</${type}>\n`;\n  }\n  /**\n   * span level renderer\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n  br() {\n    return this.options.xhtml ? \"<br/>\" : \"<br>\";\n  }\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += \">\" + text + \"</a>\";\n    return out;\n  }\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? \"/>\" : \">\";\n    return out;\n  }\n  text(text) {\n    return text;\n  }\n};\n\n// src/TextRenderer.ts\nvar _TextRenderer = class {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n  em(text) {\n    return text;\n  }\n  codespan(text) {\n    return text;\n  }\n  del(text) {\n    return text;\n  }\n  html(text) {\n    return text;\n  }\n  text(text) {\n    return text;\n  }\n  link(href, title, text) {\n    return \"\" + text;\n  }\n  image(href, title, text) {\n    return \"\" + text;\n  }\n  br() {\n    return \"\";\n  }\n};\n\n// src/Slugger.ts\nvar _Slugger = class {\n  constructor() {\n    this.seen = {};\n  }\n  serialize(value) {\n    return value.toLowerCase().trim().replace(/<[!\\/a-z].*?>/ig, \"\").replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, \"\").replace(/\\s/g, \"-\");\n  }\n  /**\n   * Finds the next safe (unique) slug to use\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + \"-\" + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n  /**\n   * Convert string to unique id\n   */\n  slug(value, options2 = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options2.dryrun);\n  }\n};\n\n// src/Parser.ts\nvar _Parser = class {\n  constructor(options2) {\n    this.options = options2 || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new _TextRenderer();\n    this.slugger = new _Slugger();\n  }\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options2) {\n    const parser2 = new _Parser(options2);\n    return parser2.parse(tokens);\n  }\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options2) {\n    const parser2 = new _Parser(options2);\n    return parser2.parseInline(tokens);\n  }\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = \"\", i, j, k, l2, l3, row, cell, header, body, token, ordered, start, loose, itemBody, item, checked, task, checkbox, ret;\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || ![\"space\", \"hr\", \"heading\", \"code\", \"table\", \"blockquote\", \"list\", \"html\", \"paragraph\", \"text\"].includes(token.type)) {\n          out += ret || \"\";\n          continue;\n        }\n      }\n      switch (token.type) {\n        case \"space\": {\n          continue;\n        }\n        case \"hr\": {\n          out += this.renderer.hr();\n          continue;\n        }\n        case \"heading\": {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger\n          );\n          continue;\n        }\n        case \"code\": {\n          out += this.renderer.code(\n            token.text,\n            token.lang,\n            !!token.escaped\n          );\n          continue;\n        }\n        case \"table\": {\n          header = \"\";\n          cell = \"\";\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n          body = \"\";\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n            cell = \"\";\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case \"blockquote\": {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case \"list\": {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n          body = \"\";\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n            itemBody = \"\";\n            if (item.task) {\n              checkbox = this.renderer.checkbox(!!checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === \"paragraph\") {\n                  item.tokens[0].text = checkbox + \" \" + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === \"text\") {\n                    item.tokens[0].tokens[0].text = checkbox + \" \" + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: \"text\",\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, !!checked);\n          }\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case \"html\": {\n          out += this.renderer.html(token.text, token.block);\n          continue;\n        }\n        case \"paragraph\": {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case \"text\": {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === \"text\") {\n            token = tokens[++i];\n            body += \"\\n\" + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return \"\";\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = \"\", i, token, ret;\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || ![\"escape\", \"html\", \"link\", \"image\", \"strong\", \"em\", \"codespan\", \"br\", \"del\", \"text\"].includes(token.type)) {\n          out += ret || \"\";\n          continue;\n        }\n      }\n      switch (token.type) {\n        case \"escape\": {\n          out += renderer.text(token.text);\n          break;\n        }\n        case \"html\": {\n          out += renderer.html(token.text);\n          break;\n        }\n        case \"link\": {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case \"image\": {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case \"strong\": {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case \"em\": {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case \"codespan\": {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case \"br\": {\n          out += renderer.br();\n          break;\n        }\n        case \"del\": {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case \"text\": {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return \"\";\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n};\n\n// src/Hooks.ts\nvar _Hooks = class {\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown) {\n    return markdown;\n  }\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html) {\n    return html;\n  }\n};\n_Hooks.passThroughHooks = /* @__PURE__ */ new Set([\n  \"preprocess\",\n  \"postprocess\"\n]);\n\n// src/Instance.ts\nvar _parseMarkdown, parseMarkdown_fn, _onError, onError_fn;\nvar Marked = class {\n  constructor(...args) {\n    __privateAdd(this, _parseMarkdown);\n    __privateAdd(this, _onError);\n    this.defaults = _getDefaults();\n    this.options = this.setOptions;\n    this.parse = __privateMethod(this, _parseMarkdown, parseMarkdown_fn).call(this, _Lexer.lex, _Parser.parse);\n    this.parseInline = __privateMethod(this, _parseMarkdown, parseMarkdown_fn).call(this, _Lexer.lexInline, _Parser.parseInline);\n    this.Parser = _Parser;\n    this.parser = _Parser.parse;\n    this.Renderer = _Renderer;\n    this.TextRenderer = _TextRenderer;\n    this.Lexer = _Lexer;\n    this.lexer = _Lexer.lex;\n    this.Tokenizer = _Tokenizer;\n    this.Slugger = _Slugger;\n    this.Hooks = _Hooks;\n    this.use(...args);\n  }\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens, callback) {\n    let values = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case \"table\": {\n          for (const cell of token.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of token.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case \"list\": {\n          values = values.concat(this.walkTokens(token.items, callback));\n          break;\n        }\n        default: {\n          if (this.defaults.extensions && this.defaults.extensions.childTokens && this.defaults.extensions.childTokens[token.type]) {\n            this.defaults.extensions.childTokens[token.type].forEach((childTokens) => {\n              values = values.concat(this.walkTokens(token[childTokens], callback));\n            });\n          } else if (token.tokens) {\n            values = values.concat(this.walkTokens(token.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n  use(...args) {\n    const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n    args.forEach((pack) => {\n      const opts = { ...pack };\n      opts.async = this.defaults.async || opts.async || false;\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error(\"extension name required\");\n          }\n          if (\"renderer\" in ext) {\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              extensions.renderers[ext.name] = function(...args2) {\n                let ret = ext.renderer.apply(this, args2);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args2);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if (\"tokenizer\" in ext) {\n            if (!ext.level || ext.level !== \"block\" && ext.level !== \"inline\") {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            if (extensions[ext.level]) {\n              extensions[ext.level].unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) {\n              if (ext.level === \"block\") {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === \"inline\") {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if (\"childTokens\" in ext && ext.childTokens) {\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          const prevRenderer = renderer[prop];\n          renderer[prop] = (...args2) => {\n            let ret = pack.renderer[prop].apply(renderer, args2);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args2);\n            }\n            return ret;\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          const prevTokenizer = tokenizer[prop];\n          tokenizer[prop] = (...args2) => {\n            let ret = pack.tokenizer[prop].apply(tokenizer, args2);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args2);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          const prevHook = hooks[prop];\n          if (_Hooks.passThroughHooks.has(prop)) {\n            hooks[prop] = (arg) => {\n              if (this.defaults.async) {\n                return Promise.resolve(pack.hooks[prop].call(hooks, arg)).then((ret2) => {\n                  return prevHook.call(hooks, ret2);\n                });\n              }\n              const ret = pack.hooks[prop].call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[prop] = (...args2) => {\n              let ret = pack.hooks[prop].apply(hooks, args2);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args2);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n      if (pack.walkTokens) {\n        const walkTokens2 = this.defaults.walkTokens;\n        opts.walkTokens = function(token) {\n          let values = [];\n          values.push(pack.walkTokens.call(this, token));\n          if (walkTokens2) {\n            values = values.concat(walkTokens2.call(this, token));\n          }\n          return values;\n        };\n      }\n      this.defaults = { ...this.defaults, ...opts };\n    });\n    return this;\n  }\n  setOptions(opt) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n};\n_parseMarkdown = new WeakSet();\nparseMarkdown_fn = function(lexer2, parser2) {\n  return (src, optOrCallback, callback) => {\n    if (typeof optOrCallback === \"function\") {\n      callback = optOrCallback;\n      optOrCallback = null;\n    }\n    const origOpt = { ...optOrCallback };\n    const opt = { ...this.defaults, ...origOpt };\n    const throwError = __privateMethod(this, _onError, onError_fn).call(this, !!opt.silent, !!opt.async, callback);\n    if (typeof src === \"undefined\" || src === null) {\n      return throwError(new Error(\"marked(): input parameter is undefined or null\"));\n    }\n    if (typeof src !== \"string\") {\n      return throwError(new Error(\"marked(): input parameter is of type \" + Object.prototype.toString.call(src) + \", string expected\"));\n    }\n    checkDeprecations(opt, callback);\n    if (opt.hooks) {\n      opt.hooks.options = opt;\n    }\n    if (callback) {\n      const highlight = opt.highlight;\n      let tokens;\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        tokens = lexer2(src, opt);\n      } catch (e) {\n        return throwError(e);\n      }\n      const done = (err) => {\n        let out;\n        if (!err) {\n          try {\n            if (opt.walkTokens) {\n              this.walkTokens(tokens, opt.walkTokens);\n            }\n            out = parser2(tokens, opt);\n            if (opt.hooks) {\n              out = opt.hooks.postprocess(out);\n            }\n          } catch (e) {\n            err = e;\n          }\n        }\n        opt.highlight = highlight;\n        return err ? throwError(err) : callback(null, out);\n      };\n      if (!highlight || highlight.length < 3) {\n        return done();\n      }\n      delete opt.highlight;\n      if (!tokens.length)\n        return done();\n      let pending = 0;\n      this.walkTokens(tokens, (token) => {\n        if (token.type === \"code\") {\n          pending++;\n          setTimeout(() => {\n            highlight(token.text, token.lang, (err, code) => {\n              if (err) {\n                return done(err);\n              }\n              if (code != null && code !== token.text) {\n                token.text = code;\n                token.escaped = true;\n              }\n              pending--;\n              if (pending === 0) {\n                done();\n              }\n            });\n          }, 0);\n        }\n      });\n      if (pending === 0) {\n        done();\n      }\n      return;\n    }\n    if (opt.async) {\n      return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then((src2) => lexer2(src2, opt)).then((tokens) => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then((tokens) => parser2(tokens, opt)).then((html) => opt.hooks ? opt.hooks.postprocess(html) : html).catch(throwError);\n    }\n    try {\n      if (opt.hooks) {\n        src = opt.hooks.preprocess(src);\n      }\n      const tokens = lexer2(src, opt);\n      if (opt.walkTokens) {\n        this.walkTokens(tokens, opt.walkTokens);\n      }\n      let html = parser2(tokens, opt);\n      if (opt.hooks) {\n        html = opt.hooks.postprocess(html);\n      }\n      return html;\n    } catch (e) {\n      return throwError(e);\n    }\n  };\n};\n_onError = new WeakSet();\nonError_fn = function(silent, async, callback) {\n  return (e) => {\n    e.message += \"\\nPlease report this to https://github.com/markedjs/marked.\";\n    if (silent) {\n      const msg = \"<p>An error occurred:</p><pre>\" + escape(e.message + \"\", true) + \"</pre>\";\n      if (async) {\n        return Promise.resolve(msg);\n      }\n      if (callback) {\n        callback(null, msg);\n        return;\n      }\n      return msg;\n    }\n    if (async) {\n      return Promise.reject(e);\n    }\n    if (callback) {\n      callback(e);\n      return;\n    }\n    throw e;\n  };\n};\n\n// src/marked.ts\nvar markedInstance = new Marked();\nfunction marked(src, opt, callback) {\n  return markedInstance.parse(src, opt, callback);\n}\nmarked.options = marked.setOptions = function(options2) {\n  markedInstance.setOptions(options2);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\nmarked.use = function(...args) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.walkTokens = function(tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\nmarked.parseInline = markedInstance.parseInline;\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Slugger = _Slugger;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nvar options = marked.options;\nvar setOptions = marked.setOptions;\nvar use = marked.use;\nvar walkTokens = marked.walkTokens;\nvar parseInline = marked.parseInline;\nvar parse = marked;\nvar parser = _Parser.parse;\nvar lexer = _Lexer.lex;\nexport {\n  _Hooks as Hooks,\n  _Lexer as Lexer,\n  Marked,\n  _Parser as Parser,\n  _Renderer as Renderer,\n  _Slugger as Slugger,\n  _TextRenderer as TextRenderer,\n  _Tokenizer as Tokenizer,\n  _defaults as defaults,\n  _getDefaults as getDefaults,\n  lexer,\n  marked,\n  options,\n  parse,\n  parseInline,\n  parser,\n  setOptions,\n  use,\n  walkTokens\n};\n//# sourceMappingURL=marked.esm.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBlockType } from '@wordpress/blocks';\r\nimport { __ } from '@wordpress/i18n';\r\nimport './editor.scss';\r\n\r\nimport Edit from './edit';\r\nimport Save from './save';\r\nimport metadata from './block.json';\r\nimport transforms from './transforms';\r\n\r\nregisterBlockType(metadata.name, {\r\n\ttitle: __(metadata.title),\r\n\ticon: metadata.icon,\r\n\tcategory: metadata.category,\r\n\tdescription: __(metadata.description),\r\n\ttransforms,\r\n\tsupports: {\r\n\t\thtml: true,\r\n\t\tclassName: false,\r\n\t},\r\n\tattributes: metadata.attributes,\t\r\n\tedit: Edit,\r\n\tsave: Save,\r\n\t\r\n});\r\n"],"names":["AlignmentToolbar","BlockControls","ToolbarGroup","ToolbarButton","Spinner","__","AndikaBlockControls","props","attributes","setAttributes","isLoading","onGenerateClick","createElement","value","alignment","onChange","icon","label","onClick","isPressed","disabled","createBlock","useDispatch","useSelect","store","blockEditorStore","AndikaBlockHandler","content","setContent","clientId","insertBlocks","replaceBlocks","removeBlock","getBlock","getBlockOrder","getBlockIndex","select","onSplit","isOriginal","updatedContent","slice","indexOf","newAttributes","block","onReplace","blocks","map","index","name","onMerge","blockIndex","blockOrder","prevBlockIndex","prevBlockClientId","prevBlock","mergedContent","nextBlockIndex","nextBlockClientId","nextBlock","InspectorControls","PanelColorSettings","FontSizePicker","PanelBody","RangeControl","SelectControl","AndikaInspectorControls","_ref","lineHeight","onChangeLineHeight","title","andikaTextLength","options","fontSize","__nextHasNoMarginBottom","min","max","step","initialOpen","colorSettings","textColor","backgroundColor","useBlockProps","Fragment","useState","useCallback","useEffect","useRef","RichText","generateText","Edit","isSelected","contentAttr","setIsLoading","RichTextRef","blockProps","createNotice","postTitle","getEditedPostAttribute","previousBlocks","getBlocks","previousContent","length","join","setCaretPosition","editableRef","current","range","document","createRange","sel","window","getSelection","setStart","lastChild","setStartAfter","collapse","removeAllRanges","addRange","focus","prompt","error","message","ref","tagName","newContent","className","placeholder","style","textAlign","color","onRemove","Save","Content","elementToLevel","h1","h2","h3","h4","h5","h6","levelToElement","transforms","from","type","transform","_ref2","level","element","to","_ref3","_ref4","hasOwnProperty","AndikaOpenAI","marked","andikaAPI","andika","buffer","andikaStreamEvents","event","data","_parsedData$choices$","parsedData","JSON","parse","text","choices","delta","sanitizedText","replace","includes","paragraphs","split","validParagraphs","filter","paragraph","trim","htmlParagraphs","html","isList","test","isTable","values","wp","updatedBlock","dispatch","replaceBlock","remainingBlocks","e","Error","maxTokens","andikaText","max_tokens","createParser","API_BASE_URL","constructor","apiKey","api_key","model","temperature","parseFloat","top_p","topP","frequency_penalty","frequencyPenalty","presence_penalty","presencePenalty","stream","get_api_url","callback","arguments","undefined","url","body","n","messages","role","requestOptions","method","headers","stringify","response","fetch","ok","errorData","json","console","statusText","parser","reader","getReader","decoder","TextDecoder","done","read","feed","decode","registerBlockType","metadata","category","description","supports","edit","save"],"sourceRoot":""}